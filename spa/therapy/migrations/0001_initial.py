# Generated by Django 4.2.19 on 2025-03-20 08:32

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_ckeditor_5.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.PositiveSmallIntegerField(choices=[(0, 'Босс'), (1, 'Пользователь'), (2, 'Специалист'), (3, 'Администратор')], default=1, verbose_name='кто по жизни')),
                ('phone', models.CharField(blank=True, max_length=12, null=True, verbose_name='Телефон')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='user.photos', verbose_name='Фото')),
                ('registration_date', models.DateField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'ordering': ['id'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ServicesCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Название')),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('is_public', models.BooleanField(default=True, verbose_name='Публикация')),
            ],
            options={
                'verbose_name': 'Категория услуг',
                'verbose_name_plural': 'Категории услуг',
            },
        ),
        migrations.CreateModel(
            name='WorkerSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.SmallIntegerField(choices=[(0, 'Понедельник'), (1, 'Вторник'), (2, 'Среда'), (3, 'Четверг'), (4, 'Пятница'), (5, 'Суббота'), (6, 'Воскресенье')], verbose_name='День недели')),
                ('start_time', models.TimeField(verbose_name='Начало рабочего дня')),
                ('end_time', models.TimeField(verbose_name='Конец рабочего дня')),
                ('pre_entry_days', models.PositiveIntegerField(default=14, verbose_name='предварительная запись на прием (кол-во дней)')),
                ('worker', models.ForeignKey(limit_choices_to={'role': 2}, on_delete=django.db.models.deletion.CASCADE, related_name='worker_schedule', to=settings.AUTH_USER_MODEL, verbose_name='Специалист')),
            ],
            options={
                'verbose_name': 'Расписание',
                'verbose_name_plural': 'Расписание',
            },
        ),
        migrations.CreateModel(
            name='Services',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Название')),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('duration', models.PositiveIntegerField(verbose_name='Длительность приема в минутах')),
                ('price', models.PositiveIntegerField(verbose_name='Цена')),
                ('woker_reward', models.PositiveIntegerField(verbose_name='Вознаграждение специалиста')),
                ('discription', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Описание')),
                ('is_public', models.BooleanField(default=True, verbose_name='Публикация')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='services', to='therapy.servicescategory', verbose_name='Категория')),
            ],
            options={
                'verbose_name': 'Услуга',
                'verbose_name_plural': 'Услуги',
            },
        ),
        migrations.CreateModel(
            name='Bid',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(verbose_name='Дата')),
                ('is_chaild_bid', models.BooleanField(default=False, verbose_name='заявка для ребенка')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Дата рождения клиента')),
                ('sex', models.CharField(choices=[('male', 'Мужской'), ('female', 'Женский')], default='male', max_length=10, verbose_name='Пол')),
                ('status', models.CharField(choices=[('CREATED', 'Создана'), ('CONFIRMED1', 'Подтверждена администратором'), ('CONFIRMED2', 'Подтверждена специалистом'), ('REJECTED', 'Отклонена'), ('PAID', 'Оплачена'), ('COMPLETED', 'Завершена')], default='CREATED', max_length=50, verbose_name='статус заказа')),
                ('note', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Примечание')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bid_services', to='therapy.services', verbose_name='Услуга')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bid_user', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
                ('worker', models.ForeignKey(limit_choices_to={'role': 2}, on_delete=django.db.models.deletion.CASCADE, related_name='bid_worker', to=settings.AUTH_USER_MODEL, verbose_name='специалист')),
            ],
            options={
                'verbose_name': 'Заявка',
                'verbose_name_plural': 'Заявки',
            },
        ),
        migrations.CreateModel(
            name='Abonements',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Название')),
                ('price', models.PositiveIntegerField(verbose_name='Цена')),
                ('number_of_visits', models.PositiveIntegerField(verbose_name='Количество посещений')),
                ('days_limit', models.PositiveIntegerField(verbose_name='Лимит дней')),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Описание')),
                ('servise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='abonements_services', to='therapy.services', verbose_name='Услуга')),
            ],
            options={
                'verbose_name': 'Абонемент',
                'verbose_name_plural': 'Абонементы',
            },
        ),
        migrations.CreateModel(
            name='AbonementBid',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_day', models.DateField(auto_now_add=True)),
                ('rest_of_visits', models.PositiveIntegerField(verbose_name='Оставшийся лимит посещений')),
                ('abonement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='abo_bid', to='therapy.abonements', verbose_name='Абонемент')),
                ('user', models.ForeignKey(limit_choices_to={'role': 1}, on_delete=django.db.models.deletion.CASCADE, related_name='abo_user', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
                ('worker', models.ForeignKey(limit_choices_to={'role': 2}, on_delete=django.db.models.deletion.CASCADE, related_name='abo_worker', to=settings.AUTH_USER_MODEL, verbose_name='специалист')),
            ],
            options={
                'verbose_name': 'Заявка на абонемент',
                'verbose_name_plural': 'Заявки на абонементы',
            },
        ),
    ]
